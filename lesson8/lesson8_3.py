########################################################## 3 ##########################################################
#Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь
# сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
# сформированный список выводится на экран.
#
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение. При этом работа скрипта не должна завершаться.

class IntTryExcept:
    def __init__(self, *args):
        self.my_list = []

    def my_input(self):

        while True:
            try:
                val = int(input('Введите целое число. По окончанию ввода - Enter: '))
                self.my_list.append(val)
                print(f'Список правильных значений - {self.my_list} \n')
            except:
                print(f"Недопустимые значения. Вводите целые числа")
                cont_flag = input(f'Повторить? - Y/N ')
                self.my_list = [] #обнулим если ошибочный ввод
                if cont_flag == 'y' or cont_flag == 'Y':
                    print(try_except.my_input())
                elif cont_flag == 'N' or cont_flag == 'n':
                    return f'Преднамеренный выход'
                else:
                    return f'Вы продолжаете вводить недопостимые значения. Принудительный выход'


try_except = IntTryExcept(1)
print(try_except.my_input())